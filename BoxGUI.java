/*
*This project is FlexBox Order System 
*The system validates and determine what box can be created by the company
*It also allows customers to see all orders made and total cost of order
 */
package flexbox;

import java.awt.Color;
import static java.lang.Integer.parseInt;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author UP750825
 * @author Up794190
 */

/**
 * 
 * BoxGUI produces the interactive interface for the customer to make selections 
 * in compiling their desired box order
 */
public class BoxGUI extends javax.swing.JFrame {

    public int width, height, length, grade, qty, color;
    public Boolean reinBottom, reinCorners, sealTop;
    
    ArrayList boxes = new ArrayList();
    
    public String price;

    /**
     * Creates new form BoxGUI
     */
    public BoxGUI() {
        price = "0";
        initComponents();
        addToBasket.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorsGroup = new javax.swing.ButtonGroup();
        buttonsPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        addToBasket = new javax.swing.JButton();
        addNewButton = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        rightMargin = new javax.swing.JPanel();
        leftMargin = new javax.swing.JPanel();
        helpButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        orderPanel = new javax.swing.JPanel();
        Subtitle = new javax.swing.JLabel();
        Subtitle2 = new javax.swing.JLabel();
        boxIcon = new javax.swing.JLabel();
        gradeLabel = new javax.swing.JLabel();
        gradeComboBox = new javax.swing.JComboBox<>();
        cm_1 = new javax.swing.JLabel();
        widthLabel = new javax.swing.JLabel();
        widthComboBox = new javax.swing.JComboBox<>();
        cm_2 = new javax.swing.JLabel();
        lengthLabel = new javax.swing.JLabel();
        lengthComboBox = new javax.swing.JComboBox<>();
        cm_3 = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        heightComboBox = new javax.swing.JComboBox<>();
        noColorsRadioBtn = new javax.swing.JRadioButton();
        oneColorsRadioBtn = new javax.swing.JRadioButton();
        twoColorsRadioBtn = new javax.swing.JRadioButton();
        reinBottomCheckBox = new javax.swing.JCheckBox();
        reinCornersCheckBox = new javax.swing.JCheckBox();
        sealTopCheckBox = new javax.swing.JCheckBox();
        qtyLabel = new javax.swing.JLabel();
        qtyTextField = new javax.swing.JTextField();
        basketPanel = new javax.swing.JPanel();
        orderSubtitle = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        receiptPanel = new javax.swing.JScrollPane();
        receiptText = new javax.swing.JTextArea();
        costLabel = new javax.swing.JLabel();
        costResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FlexBox");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);
        setLocationByPlatform(true);
        setName("MainContainer"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(700, 600));

        buttonsPanel.setBackground(new java.awt.Color(255, 0, 0));
        buttonsPanel.setPreferredSize(new java.awt.Dimension(10, 40));
        buttonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 7));

        cancelButton.setText("EXIT");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.setVisible(false);
        buttonsPanel.add(cancelButton);

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(resetButton);

        addToBasket.setText("Add To Basket");
        addToBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBasketActionPerformed(evt);
            }
        });
        buttonsPanel.add(addToBasket);

        addNewButton.setText("Add New Order");
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });
        addNewButton.setVisible(false);
        buttonsPanel.add(addNewButton);

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.PAGE_END);

        titlePanel.setBackground(new java.awt.Color(0, 204, 0));
        titlePanel.setMinimumSize(new java.awt.Dimension(10, 80));
        titlePanel.setPreferredSize(new java.awt.Dimension(10, 80));
        titlePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 20));

        Title.setFont(new java.awt.Font("Bell MT", 1, 36)); // NOI18N
        Title.setText("FLEX BOX");
        titlePanel.add(Title);

        getContentPane().add(titlePanel, java.awt.BorderLayout.PAGE_START);

        rightMargin.setBackground(new java.awt.Color(255, 255, 255));
        rightMargin.setPreferredSize(new java.awt.Dimension(30, 10));
        getContentPane().add(rightMargin, java.awt.BorderLayout.LINE_END);

        leftMargin.setBackground(new java.awt.Color(255, 255, 255));
        leftMargin.setPreferredSize(new java.awt.Dimension(30, 10));

        helpButton.setBackground(new java.awt.Color(102, 102, 255));
        helpButton.setText("?\n");
        helpButton.setToolTipText("Please click, if you would like to check costs list");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        leftMargin.add(helpButton);

        getContentPane().add(leftMargin, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.CardLayout());

        orderPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Subtitle.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        Subtitle.setText("WELCOME!");
        Subtitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Subtitle.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        orderPanel.add(Subtitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 150, -1));

        Subtitle2.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N
        Subtitle2.setText("Please, select:");
        Subtitle2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Subtitle2.setAlignmentX(1.0F);
        orderPanel.add(Subtitle2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        boxIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flexbox/cardBox2.png"))); // NOI18N
        orderPanel.add(boxIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 330, 240));

        gradeLabel.setText("GRADE:");
        orderPanel.add(gradeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, -1, 20));

        gradeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        orderPanel.add(gradeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 260, -1, 20));

        cm_1.setText("cm");
        orderPanel.add(cm_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 200, -1, 20));

        widthLabel.setText("WIDTH:");
        orderPanel.add(widthLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, -1, 20));

        widthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150" }));
        orderPanel.add(widthComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 120, -1, 20));

        cm_2.setText("cm");
        orderPanel.add(cm_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 120, -1, 20));

        lengthLabel.setText("LENGTH:");
        orderPanel.add(lengthLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, -1, 20));

        lengthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150" }));
        orderPanel.add(lengthComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 160, -1, 20));

        cm_3.setText("cm");
        orderPanel.add(cm_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 160, -1, 20));

        heightLabel.setText("HEIGHT:");
        orderPanel.add(heightLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 200, -1, 20));

        heightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150" }));
        orderPanel.add(heightComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, -1, 20));

        colorsGroup.add(noColorsRadioBtn);
        noColorsRadioBtn.setText("no colors");
        orderPanel.add(noColorsRadioBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, -1));

        colorsGroup.add(oneColorsRadioBtn);
        oneColorsRadioBtn.setText("one color");
        orderPanel.add(oneColorsRadioBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, -1));

        colorsGroup.add(twoColorsRadioBtn);
        twoColorsRadioBtn.setText("two colors");
        orderPanel.add(twoColorsRadioBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, -1, -1));

        reinBottomCheckBox.setText("Reinforced Bottom");
        orderPanel.add(reinBottomCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 360, -1, -1));

        reinCornersCheckBox.setText("Reinforced Corners");
        orderPanel.add(reinCornersCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, -1, -1));

        sealTopCheckBox.setText("Sealable Top");
        orderPanel.add(sealTopCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, -1, -1));

        qtyLabel.setText("QTY:");
        qtyLabel.setToolTipText("Please, insert the number of boxes !");
        orderPanel.add(qtyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, -1, 20));

        qtyTextField.setText("0");
        qtyTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                qtyTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                qtyTextFieldFocusLost(evt);
            }
        });
        qtyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyTextFieldActionPerformed(evt);
            }
        });
        orderPanel.add(qtyTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 410, 60, -1));

        mainPanel.add(orderPanel, "orderPanel");

        basketPanel.setBackground(new java.awt.Color(255, 255, 255));
        basketPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderSubtitle.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        orderSubtitle.setText("BASKET");
        basketPanel.add(orderSubtitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        buyButton.setText("BUY");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });
        basketPanel.add(buyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 410, -1, -1));

        receiptText.setEditable(false);
        receiptText.setColumns(20);
        receiptText.setRows(5);
        receiptPanel.setViewportView(receiptText);

        basketPanel.add(receiptPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 350, 300));

        costLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        costLabel.setText("TOTAL COST:       £");
        basketPanel.add(costLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 380, 140, 20));

        costResult.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        basketPanel.add(costResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 70, 20));

        mainPanel.add(basketPanel, "basketPanel");

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
     /**
     * Adds actions to basket
     */
    private void addToBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBasketActionPerformed

        logic();
        orderPanel.setVisible(false);
        
      // following code validates selection of options by user  
     if(addToBasket.isValid() 
&& ( (noColorsRadioBtn.isSelected() && (((parseInt(gradeComboBox.getSelectedItem().toString()) >= 1 && parseInt(gradeComboBox.getSelectedItem().toString()) <= 3) && !reinBottomCheckBox.isSelected() && !reinCornersCheckBox.isSelected())  ))
|| ( oneColorsRadioBtn.isSelected() && ((parseInt(gradeComboBox.getSelectedItem().toString()) >= 2 && parseInt(gradeComboBox.getSelectedItem().toString()) <= 4) && !reinBottomCheckBox.isSelected() && !reinCornersCheckBox.isSelected()) )
|| ( twoColorsRadioBtn.isSelected() && ((parseInt(gradeComboBox.getSelectedItem().toString()) >= 2 && parseInt(gradeComboBox.getSelectedItem().toString()) <= 5) && !reinBottomCheckBox.isSelected() && !reinCornersCheckBox.isSelected()) )              
|| ( twoColorsRadioBtn.isSelected() && ((parseInt(gradeComboBox.getSelectedItem().toString()) >= 2 && parseInt(gradeComboBox.getSelectedItem().toString()) <= 5) && reinBottomCheckBox.isSelected() && !reinCornersCheckBox.isSelected())  )  
|| ( twoColorsRadioBtn.isSelected() && ((parseInt(gradeComboBox.getSelectedItem().toString()) >= 3 && parseInt(gradeComboBox.getSelectedItem().toString()) <= 5) && reinBottomCheckBox.isSelected() && reinCornersCheckBox.isSelected())  )
    ) && (sealTopCheckBox.isSelected() || !sealTopCheckBox.isSelected())){ 
          
  
            basketPanel.setVisible(true);
            addNewButton.setVisible(true);
            cancelButton.setVisible(true);
            addToBasket.setVisible(false);
            resetButton.setVisible(false);
            
            
            
            //Outputs the recipt information of the customers' order choices
        receiptText.setEditable(false);
        receiptText.append("\nWidth: " + widthComboBox.getSelectedItem().toString() + " cm.");
        receiptText.append("\nLength: " + lengthComboBox.getSelectedItem().toString() + " cm.");
        receiptText.append("\nHeight: " + heightComboBox.getSelectedItem().toString() + " cm.");
        receiptText.append("\nGrade: " + gradeComboBox.getSelectedItem().toString());

        if (noColorsRadioBtn.isSelected()) {
            receiptText.append("\nNumber of colors: zero");
        } else if (oneColorsRadioBtn.isSelected()) {
            receiptText.append("\nNumber of colors: one");
        } else {
            receiptText.append("\nNumber of colors: two");
        }

        if (reinBottomCheckBox.isSelected()) {
            receiptText.append("\nRainforced Bottom: is selected");
        } else {
            receiptText.append("\nRainforced Bottom: is not selected");
        }

        if (reinCornersCheckBox.isSelected()) {
            receiptText.append("\nRainforced Corners: are selected");
        } else {
            receiptText.append("\nRainforced Corners: are not selected");
        }

        if (sealTopCheckBox.isSelected()) {
            receiptText.append("\nSealable Top: is selected");
        } else {
            receiptText.append("\nSealable Top: is not selected");
        }

        receiptText.append("\nBoxes Quantity: " + qtyTextField.getText());

        receiptText.append("\n");
        
        //adds the cost of all box orders within one order reciept.
       double totalCost = 0;
       for(int i = 0; i< boxes.size(); i++) {
           totalCost += Double.valueOf(boxes.get(i).toString());
        
       }
       
       //sets the number of digits to be displayed after the decimal point to 2 digits when displaying total cost.
        double notCovertNo = totalCost;
        costResult.setText(new DecimalFormat("##.##").format(notCovertNo));
        }
        
        else {
            // display appropirate error message if a chosen combination of options by the user is not manufactured by FlexBox company.
            JOptionPane.showMessageDialog(null, "Please, change settings. Given settings cannot pass, \nThe company does not produce such type of boxes.", "Error 404: ", JOptionPane.PLAIN_MESSAGE);

        }

    }//GEN-LAST:event_addToBasketActionPerformed

    /**
    Reset button, to clear data selected by the user to the initial start window display.
    */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        if (resetButton.isValid()) {
            reset();
        }
    }//GEN-LAST:event_resetButtonActionPerformed
/**
 * makes visible the orderPanel and addToBasket button in the order window.
 */
    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed

        if (addNewButton.isValid()) {
            basketPanel.setVisible(false);
            orderPanel.setVisible(true);

            addNewButton.setVisible(false);
            cancelButton.setVisible(false);
            addToBasket.setVisible(true);
            resetButton.setVisible(true);

            reset();
        }
    }//GEN-LAST:event_addNewButtonActionPerformed

    /** 
     * cancel button allows the customer to cancel and leave the order system application
    */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Gets what ever quantity amount the user enters into the order window
     */
    private void qtyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyTextFieldActionPerformed
//     
    }//GEN-LAST:event_qtyTextFieldActionPerformed

/**
 * Help button allows uses to click on it to show a dialog box giving a snippet of examples to enter into 
 * selection and details about cost associated with boxes and additional parts
 */
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        //information to be displayed in help dialog box
        String message = "Cost per m2 [in £]: \nGrade 1: 0.50; \nGrade 2: 0.60; \nGrade 3: 0.72; \nGrade 4: 0.90; \nGrade 5: 1.40; "
                + "\n\nAdditional costs: \n1 color: 13% extra; \n2 colors: 16% extra; \nReinforced Bottom: 14% extra; "
                + " \nReinforced Corners: 10% extra; \nSealable Top: 8% extra;"
                + "\n "
                + "\nTypes of cardboard boxes available: "
                + "\nIf you want a box with no colors: select grade 1-3, no reinforced bottom, no reinforced corners."
                + "\nIf you want a box with one color: select: grade 2-4, no reinforced bottom, no reinforced corners."
                + "\nIf you want a box with two colors: select grade 2-5, and you CAN select reinforced bottom, no reinforced corners."
                + "\nIf you want a box with two colors and reinforced bottom and reinforced corners, select: grade 3-5.";
        JTextArea textArea = new JTextArea(message);

        JOptionPane.showMessageDialog(null, message, "Help: ", JOptionPane.PLAIN_MESSAGE);


    }//GEN-LAST:event_helpButtonActionPerformed

    /**
     * Buy button, when cicked displays a message thanking the customer for purchasing their order.
     */
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        /**
         * add information about order number random
         */
        JOptionPane.showMessageDialog(null, "Thank you for a shopping. \nHave a nice day.", "Payment", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_buyButtonActionPerformed

    /**
     * get and validate input of quality amount
     */
    private void qtyTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyTextFieldFocusLost

        String text = qtyTextField.getText();
        //exception to handle if non numeric values are entered into the qauntity section of the order window.
        try {
            if (qtyTextField.getText().length() >= 4 || qtyTextField.getText().matches("0")) {
                qtyTextField.setBackground(Color.decode("#ffb3b3"));//Turns background red to indicate invalid qauntity entered 
                qtyTextField.setToolTipText("Please, insert number largest than 0 and no larger than 999");// Tells the user to eneter a quantity value more than 0 and less than 1000
                addToBasket.setEnabled(false);// do not enable the add to basket button if the quantity is invalid.
            } else {
                addToBasket.setEnabled(true);//enable addToBasket button so user can add their valid created box to their shopping basket
                qtyTextField.setBackground(Color.decode("#bbffbb")); //Quantity section background turns green when quantity entered by user is valid within the paremeters
            }
            int qtyInput = Integer.parseInt(text);//reads input from user
        } catch (NumberFormatException nfe) {
            qtyTextField.setBackground(Color.decode("#ffb3b3"));//Quantity section displays red if input is invalid
            addToBasket.setEnabled(false);//addToBasket button does not enable
            JOptionPane.showMessageDialog(qtyTextField, "Please, insert only numbers !");// A dialog box informing the user only numeric values should be entered.
        }

    }//GEN-LAST:event_qtyTextFieldFocusLost

    /**
     * get and validate input of text field
     */
    private void qtyTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyTextFieldFocusGained
        addToBasket.setEnabled(true);
        String text = qtyTextField.getText();
        try {
            addToBasket.setEnabled(true);
            int qtyInput = Integer.parseInt(text);
            qtyTextField.setBackground(Color.decode("#bbffbb"));    //green
        } catch (NumberFormatException e) {
            qtyTextField.setBackground(Color.decode("#ffb3b3"));
        }
    }//GEN-LAST:event_qtyTextFieldFocusGained

    /**
     * reset the initial options of the order window when the reset button is selected
     */
    private void reset() {
        noColorsRadioBtn.setSelected(true);
        oneColorsRadioBtn.setSelected(false);
        twoColorsRadioBtn.setSelected(false);

        reinBottomCheckBox.setSelected(false);
        reinCornersCheckBox.setSelected(false);
        sealTopCheckBox.setSelected(false);

        widthComboBox.setSelectedIndex(0);
        lengthComboBox.setSelectedIndex(0);
        heightComboBox.setSelectedIndex(0);
        gradeComboBox.setSelectedIndex(0);

        qtyTextField.setText("0");
        
    }
    //==========================================================================
    /**
    * Gets the user selection option
    * @return colour
    */
    public int getUserColor() {
        int color = 0;
        if (noColorsRadioBtn.isSelected()) {
            color = 0;
        }
        if (oneColorsRadioBtn.isSelected()) {
            color = 1;
        }
        if (twoColorsRadioBtn.isSelected()) {
            color = 2;
        }
        return color;
    }

    //===============================accessors====================================
    /**
     * Get width from combo box
     * @return box width
     */
    public String getUserWidth() {
        return (String) widthComboBox.getSelectedItem();
        
    }
    /**
     * Get height from combo box
     * @return box height
     */
    public String getUserHeight() {//Get Hieght from combo box
        return (String) heightComboBox.getSelectedItem();
    }
    /**
     * Get userLength from combo box
     * @return length entered by user for box
     */
    public String getUserLength() {//Get Length from combo box
        return (String) lengthComboBox.getSelectedItem();
    }
    /**
     * Get user grade from combo box
     * @return box grade selected
     */
    public String getUserGrade() { //Get Grade option from combo box
        return (String) gradeComboBox.getSelectedItem();
    }
    /**
     * Get user quantity from combo box
     * @return quantity entered
     */
    public String getUserQty() { //Get Qantity
        return qtyTextField.getText();
    }
    /**
     * Get user reinforced bottom from combo box
     * @return reinforced bottoms if selected
     */
    public Boolean getUserReinBottom() { //Get Reinforce Bottom option
        return reinBottomCheckBox.isSelected();
    }
    /**
     * Get user reinforced bottom from combo box
     * @return reinforced corners if selected.
     */
    public Boolean getUserReinCorners() { //Get Reinforced Corners opition
        return reinCornersCheckBox.isSelected();
    }
    /**
     * Get user seal top from combo box
     * @return seal top if selected 
     */
    public Boolean getUserSealTop() { //Get SealTop option
        return sealTopCheckBox.isSelected();
    }
    /**
     * set width
     * @return width 
     */
    public int width() { 
        return width = parseInt(getUserWidth());
    }
    /**
     * set height
     * @return height
     */
    public int height() { 
        return height = parseInt(getUserHeight());
    }
    /**
     * set length
     * @return length
     */
    public int length() { 
        return length = parseInt(getUserLength());
    }
    /**
     * set grade
     *@return grade set 
     */
    public int grade() { 
        return grade = parseInt(getUserGrade());
    }
    /**
     * set color
     * @return color set
     */
    public int color() { 
        return color = getUserColor();
    }
    /**
     * set quantity
     * @return quantity to be set
     */
    public int qty() { 
        return qty = parseInt(getUserQty());
        
    }

    //===========================LOGIC==========================================
    public void logic() {
        /**
         * validates no colour is selected
         */
        if (noColorsRadioBtn.isSelected()) { 
            if (grade() == 1 || grade() == 2 || grade() == 3) { // validates garde is within 1 to 3 range
                if (!getUserReinBottom() && !getUserReinCorners()) {// validates selection does not have reinforced bottoms or corners
                    BoxType1 box1 = new BoxType1(width(), length(), height(), grade(), color, qty(), false, false, getUserSealTop()); //creates box of Type 1
                    System.out.println("Type 1"); // displays what type of box is created
                    box1.cost(); // calls standard box cost
                    box1.addition(); // calls addition to check if any additional cost need to be calculated
                    box1.Total(); // calls total method to calculate standard cost of box plus any additional cost
                    Double x = new Double(box1.Total()); 
                    price = x.toString(); // displays final price to order window as a string 
                    
                    boxes.add(box1.Total()); // adds total cost of the order created to an array list
                }
            }
        } else if (oneColorsRadioBtn.isSelected()) { // validate one color is selected
            if (grade() == 2 || grade() == 3 || grade() == 4) { // validates a grade within range 2 to 4 is selected 
                if (!getUserReinBottom() && !getUserReinCorners()) { // validates no reinforced bottons nor corners are selected
                    BoxType2 box2 = new BoxType2(width(), length(), height(), grade(), color, qty(), false, false, getUserSealTop());// creates box of type 2
                    System.out.println("Type 2"); // displays what type of box is created
                    box2.cost(); // calls cost method to calculate standard cost of box
                    box2.addition(); // calls addidion method to calculate cost of any additionals to box order
                    boxes.add(box2.Total()); //calls total method and adds result to an arraylist named boxes
                }
            }
        } else if (twoColorsRadioBtn.isSelected()) { //validate two colors where selected 
            if (grade() == 2 || grade() == 3 || grade() == 4 || grade() == 5) {// validates grade selected is between 2 to 5
                if (!getUserReinBottom() && !getUserReinCorners()) { // validate no renforced bottoms nor corners were selcted
                    BoxType3 box3 = new BoxType3(width(), length(), height(), grade(), color, qty(), false, false, getUserSealTop()); // creates box of type 3
                    System.out.println("Type 3");// displays that box of type 3 was created
                    box3.cost(); // calls cost method to calculate basic cost of box
                    box3.addition(); // calls addition method to calculate any additionals a box order may have.
                    boxes.add(box3.Total());// calls total order for final total of cost and adds result to an array lis named boxes.
                } 
                else if (getUserReinBottom() && !getUserReinCorners()) {// validate reinforced bottoms was selected but no corners were selected 
                    BoxType4 box4 = new BoxType4(width(), length(), height(), grade(), color, qty(), true, false, getUserSealTop());// creates box of type 4
                    System.out.println("Type 4"); // display box of type 4 was created
                    box4.cost();// calls cost method to calculate basic cost of box
                    box4.addition();// calls addition method to calculate any additionals a box order may have.
                    boxes.add(box4.Total());// calls total order for final total of cost and adds result to an array lis named boxes.
                }
            }
        }

        if ((grade() == 3 || grade() == 4 || grade() == 5)) { // validates grade was selected in range 3 to 5.
            if (getUserReinBottom() && getUserReinCorners()) { // validates reinforced bottoms and corners were selected
                BoxType5 box5 = new BoxType5(width(), length(), height(), grade(), color, qty(), true, true, getUserSealTop());// creates box of type 5
                System.out.println("Type 5"); // displays what type of box was created
                  box5.cost();// calls cost method to calculate basic cost of box
                  box5.addition();// calls addition method to calculate any additionals a box order may have.
                  boxes.add(box5.Total());// calls total order for final total of cost and adds result to an array lis named boxes.
            }
        }
    }

    //==========================================================================
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoxGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoxGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoxGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoxGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoxGUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Subtitle;
    private javax.swing.JLabel Subtitle2;
    private javax.swing.JLabel Title;
    private javax.swing.JButton addNewButton;
    private javax.swing.JButton addToBasket;
    private javax.swing.JPanel basketPanel;
    private javax.swing.JLabel boxIcon;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cm_1;
    private javax.swing.JLabel cm_2;
    private javax.swing.JLabel cm_3;
    private javax.swing.ButtonGroup colorsGroup;
    private javax.swing.JLabel costLabel;
    private javax.swing.JLabel costResult;
    private javax.swing.JComboBox<String> gradeComboBox;
    private javax.swing.JLabel gradeLabel;
    private javax.swing.JComboBox<String> heightComboBox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JPanel leftMargin;
    private javax.swing.JComboBox<String> lengthComboBox;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton noColorsRadioBtn;
    private javax.swing.JRadioButton oneColorsRadioBtn;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JLabel orderSubtitle;
    private javax.swing.JLabel qtyLabel;
    private javax.swing.JTextField qtyTextField;
    private javax.swing.JScrollPane receiptPanel;
    private javax.swing.JTextArea receiptText;
    private javax.swing.JCheckBox reinBottomCheckBox;
    private javax.swing.JCheckBox reinCornersCheckBox;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel rightMargin;
    private javax.swing.JCheckBox sealTopCheckBox;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JRadioButton twoColorsRadioBtn;
    private javax.swing.JComboBox<String> widthComboBox;
    private javax.swing.JLabel widthLabel;
    // End of variables declaration//GEN-END:variables
}
